// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: personfound.proto

#ifndef PROTOBUF_personfound_2eproto__INCLUDED
#define PROTOBUF_personfound_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <memory>
#include <swarm/Helpers.hh>
// @@protoc_insertion_point(includes)

namespace swarm {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_personfound_2eproto();
void protobuf_AssignDesc_personfound_2eproto();
void protobuf_ShutdownFile_personfound_2eproto();

class Vector3D;
class PersonFound;

// ===================================================================

class IGNITION_MSGS_VISIBLE Vector3D : public ::google::protobuf::Message {
 public:
  Vector3D();
  virtual ~Vector3D();

  Vector3D(const Vector3D& from);

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3D& default_instance();

  void Swap(Vector3D* other);

  // implements Message ----------------------------------------------

  Vector3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:swarm.msgs.Vector3D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_personfound_2eproto();
  friend void protobuf_AssignDesc_personfound_2eproto();
  friend void protobuf_ShutdownFile_personfound_2eproto();

  void InitAsDefaultInstance();
  static Vector3D* default_instance_;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE PersonFound : public ::google::protobuf::Message {
 public:
  PersonFound();
  virtual ~PersonFound();

  PersonFound(const PersonFound& from);

  inline PersonFound& operator=(const PersonFound& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonFound& default_instance();

  void Swap(PersonFound* other);

  // implements Message ----------------------------------------------

  PersonFound* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonFound& from);
  void MergeFrom(const PersonFound& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required .swarm.msgs.Vector3D pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::swarm::msgs::Vector3D& pos() const;
  inline ::swarm::msgs::Vector3D* mutable_pos();
  inline ::swarm::msgs::Vector3D* release_pos();
  inline void set_allocated_pos(::swarm::msgs::Vector3D* pos);

  // required double time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline double time() const;
  inline void set_time(double value);

  // @@protoc_insertion_point(class_scope:swarm.msgs.PersonFound)
 private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* address_;
  ::swarm::msgs::Vector3D* pos_;
  double time_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_personfound_2eproto();
  friend void protobuf_AssignDesc_personfound_2eproto();
  friend void protobuf_ShutdownFile_personfound_2eproto();

  void InitAsDefaultInstance();
  static PersonFound* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector3D

// required double x = 1;
inline bool Vector3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3D::x() const {
  // @@protoc_insertion_point(field_get:swarm.msgs.Vector3D.x)
  return x_;
}
inline void Vector3D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:swarm.msgs.Vector3D.x)
}

// required double y = 2;
inline bool Vector3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3D::y() const {
  // @@protoc_insertion_point(field_get:swarm.msgs.Vector3D.y)
  return y_;
}
inline void Vector3D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:swarm.msgs.Vector3D.y)
}

// required double z = 3;
inline bool Vector3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3D::z() const {
  // @@protoc_insertion_point(field_get:swarm.msgs.Vector3D.z)
  return z_;
}
inline void Vector3D::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:swarm.msgs.Vector3D.z)
}

// -------------------------------------------------------------------

// PersonFound

// required string address = 1;
inline bool PersonFound::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersonFound::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersonFound::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersonFound::clear_address() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& PersonFound::address() const {
  // @@protoc_insertion_point(field_get:swarm.msgs.PersonFound.address)
  return *address_;
}
inline void PersonFound::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set:swarm.msgs.PersonFound.address)
}
inline void PersonFound::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(value);
  // @@protoc_insertion_point(field_set_char:swarm.msgs.PersonFound.address)
}
inline void PersonFound::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:swarm.msgs.PersonFound.address)
}
inline ::std::string* PersonFound::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    address_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:swarm.msgs.PersonFound.address)
  return address_;
}
inline ::std::string* PersonFound::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PersonFound::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:swarm.msgs.PersonFound.address)
}

// required .swarm.msgs.Vector3D pos = 2;
inline bool PersonFound::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersonFound::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersonFound::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersonFound::clear_pos() {
  if (pos_ != NULL) pos_->::swarm::msgs::Vector3D::Clear();
  clear_has_pos();
}
inline const ::swarm::msgs::Vector3D& PersonFound::pos() const {
  // @@protoc_insertion_point(field_get:swarm.msgs.PersonFound.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::swarm::msgs::Vector3D* PersonFound::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::swarm::msgs::Vector3D;
  // @@protoc_insertion_point(field_mutable:swarm.msgs.PersonFound.pos)
  return pos_;
}
inline ::swarm::msgs::Vector3D* PersonFound::release_pos() {
  clear_has_pos();
  ::swarm::msgs::Vector3D* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void PersonFound::set_allocated_pos(::swarm::msgs::Vector3D* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:swarm.msgs.PersonFound.pos)
}

// required double time = 3;
inline bool PersonFound::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersonFound::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersonFound::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersonFound::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double PersonFound::time() const {
  // @@protoc_insertion_point(field_get:swarm.msgs.PersonFound.time)
  return time_;
}
inline void PersonFound::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:swarm.msgs.PersonFound.time)
}


typedef std::shared_ptr<swarm::msgs::Vector3D> Vector3DPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace swarm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const std::shared_ptr<swarm::msgs::Vector3D const> ConstVector3DPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_personfound_2eproto__INCLUDED
