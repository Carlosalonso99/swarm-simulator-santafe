// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GPS_SWARM_MSGS_H_
#define FLATBUFFERS_GENERATED_GPS_SWARM_MSGS_H_

#include "flatbuffers/flatbuffers.h"


namespace swarm {
namespace msgs {

struct Gps;

/// \ingroup swarm_msgs
/// \interface Gps
/// \brief A message containing GPS information.
struct Gps FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  /// \brief Latitude.
  float latitude() const { return GetField<float>(4, 0); }
  bool mutate_latitude(float latitude) { return SetField(4, latitude); }
  /// \brief Longitude.
  float longitude() const { return GetField<float>(6, 0); }
  bool mutate_longitude(float longitude) { return SetField(6, longitude); }
  /// \brief Altitude.
  float altitude() const { return GetField<float>(8, 0); }
  bool mutate_altitude(float altitude) { return SetField(8, altitude); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* latitude */) &&
           VerifyField<float>(verifier, 6 /* longitude */) &&
           VerifyField<float>(verifier, 8 /* altitude */) &&
           verifier.EndTable();
  }
};

struct GpsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_latitude(float latitude) { fbb_.AddElement<float>(4, latitude, 0); }
  void add_longitude(float longitude) { fbb_.AddElement<float>(6, longitude, 0); }
  void add_altitude(float altitude) { fbb_.AddElement<float>(8, altitude, 0); }
  GpsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GpsBuilder &operator=(const GpsBuilder &);
  flatbuffers::Offset<Gps> Finish() {
    auto o = flatbuffers::Offset<Gps>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Gps> CreateGps(flatbuffers::FlatBufferBuilder &_fbb,
   float latitude = 0,
   float longitude = 0,
   float altitude = 0) {
  GpsBuilder builder_(_fbb);
  builder_.add_altitude(altitude);
  builder_.add_longitude(longitude);
  builder_.add_latitude(latitude);
  return builder_.Finish();
}

inline const swarm::msgs::Gps *GetGps(const void *buf) { return flatbuffers::GetRoot<swarm::msgs::Gps>(buf); }

inline Gps *GetMutableGps(void *buf) { return flatbuffers::GetMutableRoot<Gps>(buf); }

inline bool VerifyGpsBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<swarm::msgs::Gps>(); }

inline void FinishGpsBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<swarm::msgs::Gps> root) { fbb.Finish(root); }

}  // namespace msgs
}  // namespace swarm

#endif  // FLATBUFFERS_GENERATED_GPS_SWARM_MSGS_H_
