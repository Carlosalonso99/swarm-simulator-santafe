// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_LOGENTRY_SWARM_MSGS_H_
#define FLATBUFFERS_GENERATED_LOGENTRY_SWARM_MSGS_H_

#include "flatbuffers/flatbuffers.h"

#include "gps_generated.h"
#include "imu_generated.h"
#include "quaternion_generated.h"
#include "sensors_generated.h"
#include "vector3_generated.h"

namespace swarm {
namespace msgs {
struct Gps;
}  // namespace msgs
}  // namespace swarm
namespace swarm {
namespace msgs {
struct Quaternion;
}  // namespace msgs
}  // namespace swarm
namespace swarm {
namespace msgs {
struct Vector3;
}  // namespace msgs
}  // namespace swarm
namespace swarm {
namespace msgs {
struct Imu;
}  // namespace msgs
}  // namespace swarm
namespace swarm {
namespace msgs {
struct Sensors;
}  // namespace msgs
}  // namespace swarm

namespace swarm {
namespace msgs {

struct LogEntry;

/// \ingroup swarm_msgs
/// \interface LogEntry
/// \brief A message containing a log entry.
struct LogEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  /// \brief Sensor information.
  const swarm::msgs::Sensors *sensors() const { return GetPointer<const swarm::msgs::Sensors *>(4); }
  swarm::msgs::Sensors *mutable_sensors() { return GetPointer<swarm::msgs::Sensors *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* sensors */) &&
           verifier.VerifyTable(sensors()) &&
           verifier.EndTable();
  }
};

struct LogEntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sensors(flatbuffers::Offset<swarm::msgs::Sensors> sensors) { fbb_.AddOffset(4, sensors); }
  LogEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LogEntryBuilder &operator=(const LogEntryBuilder &);
  flatbuffers::Offset<LogEntry> Finish() {
    auto o = flatbuffers::Offset<LogEntry>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<LogEntry> CreateLogEntry(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<swarm::msgs::Sensors> sensors = 0) {
  LogEntryBuilder builder_(_fbb);
  builder_.add_sensors(sensors);
  return builder_.Finish();
}

inline const swarm::msgs::LogEntry *GetLogEntry(const void *buf) { return flatbuffers::GetRoot<swarm::msgs::LogEntry>(buf); }

inline LogEntry *GetMutableLogEntry(void *buf) { return flatbuffers::GetMutableRoot<LogEntry>(buf); }

inline bool VerifyLogEntryBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<swarm::msgs::LogEntry>(); }

inline void FinishLogEntryBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<swarm::msgs::LogEntry> root) { fbb.Finish(root); }

}  // namespace msgs
}  // namespace swarm

#endif  // FLATBUFFERS_GENERATED_LOGENTRY_SWARM_MSGS_H_
