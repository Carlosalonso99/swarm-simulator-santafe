// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_IMU_SWARM_MSGS_H_
#define FLATBUFFERS_GENERATED_IMU_SWARM_MSGS_H_

#include "flatbuffers/flatbuffers.h"

#include "quaternion_generated.h"
#include "vector3_generated.h"

namespace swarm {
namespace msgs {
struct Quaternion;
}  // namespace msgs
}  // namespace swarm
namespace swarm {
namespace msgs {
struct Vector3;
}  // namespace msgs
}  // namespace swarm

namespace swarm {
namespace msgs {

struct Imu;

/// \ingroup swarm_msgs
/// \interface Imu
/// \brief A message containing IMU information.
struct Imu FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  /// \brief Latitude.
  const swarm::msgs::Vector3 *linvel() const { return GetPointer<const swarm::msgs::Vector3 *>(4); }
  swarm::msgs::Vector3 *mutable_linvel() { return GetPointer<swarm::msgs::Vector3 *>(4); }
  /// \brief Longitude.
  const swarm::msgs::Vector3 *angvel() const { return GetPointer<const swarm::msgs::Vector3 *>(6); }
  swarm::msgs::Vector3 *mutable_angvel() { return GetPointer<swarm::msgs::Vector3 *>(6); }
  /// \brief Altitude.
  const swarm::msgs::Quaternion *orientation() const { return GetPointer<const swarm::msgs::Quaternion *>(8); }
  swarm::msgs::Quaternion *mutable_orientation() { return GetPointer<swarm::msgs::Quaternion *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* linvel */) &&
           verifier.VerifyTable(linvel()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* angvel */) &&
           verifier.VerifyTable(angvel()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* orientation */) &&
           verifier.VerifyTable(orientation()) &&
           verifier.EndTable();
  }
};

struct ImuBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_linvel(flatbuffers::Offset<swarm::msgs::Vector3> linvel) { fbb_.AddOffset(4, linvel); }
  void add_angvel(flatbuffers::Offset<swarm::msgs::Vector3> angvel) { fbb_.AddOffset(6, angvel); }
  void add_orientation(flatbuffers::Offset<swarm::msgs::Quaternion> orientation) { fbb_.AddOffset(8, orientation); }
  ImuBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ImuBuilder &operator=(const ImuBuilder &);
  flatbuffers::Offset<Imu> Finish() {
    auto o = flatbuffers::Offset<Imu>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Imu> CreateImu(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<swarm::msgs::Vector3> linvel = 0,
   flatbuffers::Offset<swarm::msgs::Vector3> angvel = 0,
   flatbuffers::Offset<swarm::msgs::Quaternion> orientation = 0) {
  ImuBuilder builder_(_fbb);
  builder_.add_orientation(orientation);
  builder_.add_angvel(angvel);
  builder_.add_linvel(linvel);
  return builder_.Finish();
}

inline const swarm::msgs::Imu *GetImu(const void *buf) { return flatbuffers::GetRoot<swarm::msgs::Imu>(buf); }

inline Imu *GetMutableImu(void *buf) { return flatbuffers::GetMutableRoot<Imu>(buf); }

inline bool VerifyImuBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<swarm::msgs::Imu>(); }

inline void FinishImuBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<swarm::msgs::Imu> root) { fbb.Finish(root); }

}  // namespace msgs
}  // namespace swarm

#endif  // FLATBUFFERS_GENERATED_IMU_SWARM_MSGS_H_
