// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps.proto

#ifndef PROTOBUF_gps_2eproto__INCLUDED
#define PROTOBUF_gps_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#pragma GCC system_header
#include <memory>
#include <swarm/Helpers.hh>
// @@protoc_insertion_point(includes)

namespace swarm {
namespace msgs {

// Internal implementation detail -- do not call these.
void IGNITION_MSGS_VISIBLE protobuf_AddDesc_gps_2eproto();
void protobuf_AssignDesc_gps_2eproto();
void protobuf_ShutdownFile_gps_2eproto();

class Gps;

// ===================================================================

class IGNITION_MSGS_VISIBLE Gps : public ::google::protobuf::Message {
 public:
  Gps();
  virtual ~Gps();

  Gps(const Gps& from);

  inline Gps& operator=(const Gps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gps& default_instance();

  void Swap(Gps* other);

  // implements Message ----------------------------------------------

  Gps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Gps& from);
  void MergeFrom(const Gps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double altitude = 3;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  inline double altitude() const;
  inline void set_altitude(double value);

  // @@protoc_insertion_point(class_scope:swarm.msgs.Gps)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_altitude();
  inline void clear_has_altitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  double altitude_;
  friend void IGNITION_MSGS_VISIBLE protobuf_AddDesc_gps_2eproto();
  friend void protobuf_AssignDesc_gps_2eproto();
  friend void protobuf_ShutdownFile_gps_2eproto();

  void InitAsDefaultInstance();
  static Gps* default_instance_;
};
// ===================================================================


// ===================================================================

// Gps

// required double latitude = 1;
inline bool Gps::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gps::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gps::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gps::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Gps::latitude() const {
  // @@protoc_insertion_point(field_get:swarm.msgs.Gps.latitude)
  return latitude_;
}
inline void Gps::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:swarm.msgs.Gps.latitude)
}

// required double longitude = 2;
inline bool Gps::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gps::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gps::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gps::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Gps::longitude() const {
  // @@protoc_insertion_point(field_get:swarm.msgs.Gps.longitude)
  return longitude_;
}
inline void Gps::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:swarm.msgs.Gps.longitude)
}

// required double altitude = 3;
inline bool Gps::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gps::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gps::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gps::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double Gps::altitude() const {
  // @@protoc_insertion_point(field_get:swarm.msgs.Gps.altitude)
  return altitude_;
}
inline void Gps::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:swarm.msgs.Gps.altitude)
}


typedef std::shared_ptr<swarm::msgs::Gps> GpsPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace swarm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

typedef const std::shared_ptr<swarm::msgs::Gps const> ConstGpsPtr;
// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gps_2eproto__INCLUDED
