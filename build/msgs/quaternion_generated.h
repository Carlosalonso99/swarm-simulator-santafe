// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_QUATERNION_SWARM_MSGS_H_
#define FLATBUFFERS_GENERATED_QUATERNION_SWARM_MSGS_H_

#include "flatbuffers/flatbuffers.h"


namespace swarm {
namespace msgs {

struct Quaternion;

/// \ingroup swarm_msgs
/// \interface Quaternion
/// \brief A message for a quaternion
struct Quaternion FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  /// \brief X.
  float x() const { return GetField<float>(4, 0); }
  bool mutate_x(float x) { return SetField(4, x); }
  /// \brief Y.
  float y() const { return GetField<float>(6, 0); }
  bool mutate_y(float y) { return SetField(6, y); }
  /// \brief Z.
  float z() const { return GetField<float>(8, 0); }
  bool mutate_z(float z) { return SetField(8, z); }
  /// \brief W.
  float w() const { return GetField<float>(10, 0); }
  bool mutate_w(float w) { return SetField(10, w); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* x */) &&
           VerifyField<float>(verifier, 6 /* y */) &&
           VerifyField<float>(verifier, 8 /* z */) &&
           VerifyField<float>(verifier, 10 /* w */) &&
           verifier.EndTable();
  }
};

struct QuaternionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(4, x, 0); }
  void add_y(float y) { fbb_.AddElement<float>(6, y, 0); }
  void add_z(float z) { fbb_.AddElement<float>(8, z, 0); }
  void add_w(float w) { fbb_.AddElement<float>(10, w, 0); }
  QuaternionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  QuaternionBuilder &operator=(const QuaternionBuilder &);
  flatbuffers::Offset<Quaternion> Finish() {
    auto o = flatbuffers::Offset<Quaternion>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Quaternion> CreateQuaternion(flatbuffers::FlatBufferBuilder &_fbb,
   float x = 0,
   float y = 0,
   float z = 0,
   float w = 0) {
  QuaternionBuilder builder_(_fbb);
  builder_.add_w(w);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const swarm::msgs::Quaternion *GetQuaternion(const void *buf) { return flatbuffers::GetRoot<swarm::msgs::Quaternion>(buf); }

inline Quaternion *GetMutableQuaternion(void *buf) { return flatbuffers::GetMutableRoot<Quaternion>(buf); }

inline bool VerifyQuaternionBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<swarm::msgs::Quaternion>(); }

inline void FinishQuaternionBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<swarm::msgs::Quaternion> root) { fbb.Finish(root); }

}  // namespace msgs
}  // namespace swarm

#endif  // FLATBUFFERS_GENERATED_QUATERNION_SWARM_MSGS_H_
