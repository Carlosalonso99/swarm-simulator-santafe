// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SENSORS_SWARM_MSGS_H_
#define FLATBUFFERS_GENERATED_SENSORS_SWARM_MSGS_H_

#include "flatbuffers/flatbuffers.h"

#include "gps_generated.h"
#include "imu_generated.h"
#include "quaternion_generated.h"
#include "vector3_generated.h"

namespace swarm {
namespace msgs {
struct Gps;
}  // namespace msgs
}  // namespace swarm
namespace swarm {
namespace msgs {
struct Quaternion;
}  // namespace msgs
}  // namespace swarm
namespace swarm {
namespace msgs {
struct Vector3;
}  // namespace msgs
}  // namespace swarm
namespace swarm {
namespace msgs {
struct Imu;
}  // namespace msgs
}  // namespace swarm

namespace swarm {
namespace msgs {

struct Sensors;

/// \ingroup swarm_msgs
/// \interface Sensors
/// \brief A message containing sensor information.
struct Sensors FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  /// \brief GPS.
  const swarm::msgs::Gps *gps() const { return GetPointer<const swarm::msgs::Gps *>(4); }
  swarm::msgs::Gps *mutable_gps() { return GetPointer<swarm::msgs::Gps *>(4); }
  /// \brief IMU.
  const swarm::msgs::Imu *imu() const { return GetPointer<const swarm::msgs::Imu *>(6); }
  swarm::msgs::Imu *mutable_imu() { return GetPointer<swarm::msgs::Imu *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* gps */) &&
           verifier.VerifyTable(gps()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* imu */) &&
           verifier.VerifyTable(imu()) &&
           verifier.EndTable();
  }
};

struct SensorsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gps(flatbuffers::Offset<swarm::msgs::Gps> gps) { fbb_.AddOffset(4, gps); }
  void add_imu(flatbuffers::Offset<swarm::msgs::Imu> imu) { fbb_.AddOffset(6, imu); }
  SensorsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SensorsBuilder &operator=(const SensorsBuilder &);
  flatbuffers::Offset<Sensors> Finish() {
    auto o = flatbuffers::Offset<Sensors>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Sensors> CreateSensors(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<swarm::msgs::Gps> gps = 0,
   flatbuffers::Offset<swarm::msgs::Imu> imu = 0) {
  SensorsBuilder builder_(_fbb);
  builder_.add_imu(imu);
  builder_.add_gps(gps);
  return builder_.Finish();
}

inline const swarm::msgs::Sensors *GetSensors(const void *buf) { return flatbuffers::GetRoot<swarm::msgs::Sensors>(buf); }

inline Sensors *GetMutableSensors(void *buf) { return flatbuffers::GetMutableRoot<Sensors>(buf); }

inline bool VerifySensorsBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<swarm::msgs::Sensors>(); }

inline void FinishSensorsBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<swarm::msgs::Sensors> root) { fbb.Finish(root); }

}  // namespace msgs
}  // namespace swarm

#endif  // FLATBUFFERS_GENERATED_SENSORS_SWARM_MSGS_H_
